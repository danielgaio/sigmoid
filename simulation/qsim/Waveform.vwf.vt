// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/13/2020 19:46:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sigmoid
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sigmoid_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [16:0] x;
// wires                                               
wire [16:0] y;

// assign statements (if any)                          
sigmoid i1 (
// port map - connection between master ports and signals/registers   
	.x(x),
	.y(y)
);
initial 
begin 
#1000000 $finish;
end 
// x[ 16 ]
initial
begin
	x[16] = 1'b0;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b0;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
end 
endmodule

